# https://docs.docker.com/compose/compose-file/

x-common-variables: &common-variables
  JAVA_TOOL_OPTIONS: -XX:MaxRAMPercentage=60.0
  SIG_SECRET_KEY: JWTSecretKeyDontUseInProduction!
  USERCTX_KEY: JWTSecretKeyDontUseInProduction!
  server.shutdown: graceful
  server.max-http-header-size: 64KB
  server.forward-headers-strategy: framework
  eureka.client.serviceUrl.defaultZone: http://registry:8080/eureka
  eureka.client.registry-fetch-interval-seconds: 15
  eureka.client.instance-info-replication-interval-seconds: 15
  eureka.client.healthcheck.enabled: true
  eureka.instance.non-secure-port: 8080
  eureka.instance.prefer-ip-address: true
  eureka.instance.initialStatus: STARTING
  management.endpoints.web.exposure.include: '*'
  management.endpoints.enabled-by-default: true
  management.security.roles: ANONYMOUS,ACTUATOR,USER
  spring.main.banner-mode: off
  spring.zipkin.enabled: false
  spring.cloud.config.enabled: false
  spring.cloud.kubernetes.enabled: false
  backbase.audit.enabled: false
  backbase.security.public.paths: /integration-api/**
  backbase.security.mtls.enabled: false
  backbase.http.request-logging-filter.max-payload-length: 5000
  logging.level.com.backbase: INFO
  logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter: INFO

x-database-variables: &database-variables
  logging.level.liquibase: INFO
  spring.liquibase.enabled: true
  spring.datasource.username: root
  spring.datasource.password: root
  spring.datasource.driver-class-name: com.mysql.cj.jdbc.Driver
  spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQL8Dialect

x-message-broker-variables: &message-broker-variables
  #spring.activemq.broker-url: tcp://activemq:61616
  #spring.activemq.user: admin
  #spring.activemq.password: admin
  backbase.activemq.enabled: 'false'
  spring.cloud.stream.defaultBinder: 'kafka'
  backbase.kafka.enabled: 'true'
  spring.kafka.consumer.bootstrap-servers: kafka:9092
  spring.cloud.stream.kafka.binder.kafkas: kafka:9092
  spring.cloud.stream.kafka.binder.zkNodes: zookeeper:2181
  spring.kafka.bootstrap-servers: kafka:9092
  spring.kafka.consumer.session.timeout.ms: 60000
  PRODUCER_BOOTSTRAP_SERVERS: 'kafka:9092'

x-healthcheck-defaults: &healthcheck-defaults
  start_period: 60s
  interval: 15s
  timeout: 5s
  retries: 15

name: rch-poc

volumes:
  rch-poc_mysql_data:
    driver: local
  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local
  kafka-data:
    driver: local

networks:
  kafka-net:
    driver: bridge
  default:
    name: rch-poc_default

services:
  mysql:
    image: mysql:8.0.31
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - rch-poc_mysql_data:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping --silent
      interval: 10s
      timeout: 5s
      retries: 5

#  activemq:
#    image: symptoma/activemq:5.17.3
#    privileged: true
#    ports:
#      - "61616:61616"
#      - "8161:8161"
#    healthcheck:
#      test: /opt/activemq/bin/activemq query --objname type=Broker,brokerName=*,service=Health | grep Good
#      interval: 10s
#      timeout: 5s
#      retries: 5

  registry:
    image: repo.backbase.com/backbase-docker-releases/registry:${BB_VERSION}
    ports:
      - "8761:8080"
    volumes:
      - ./scripts/HealthCheck.java:/tmp/HealthCheck.java
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/HealthCheck.java" ]

  edge:
    image: repo.backbase.com/backbase-docker-releases/edge:${BB_VERSION}
    ports:
      - "8280:8080"
    environment:
      <<: *common-variables
      gateway.actuator.security.enabled: false
      gateway.csrf.enabled: false
    volumes:
      - ./scripts/HealthCheck.java:/tmp/HealthCheck.java
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/HealthCheck.java", "http://registry:8080/eureka/apps/edge", "<status>UP</status>" ]
    links:
      - registry
      - token-converter

  token-converter:
    image: repo.backbase.com/backbase-docker-releases/oidc-token-converter-service:${BB_VERSION}
    ports:
      - "7779:8080"
    environment:
      <<: *common-variables
      backbase.oidc-token-converter.whitelistedDomains[0].internalHostScheme: http
      backbase.oidc-token-converter.whitelistedDomains[0].internalHost: backbase-identity:8080
      backbase.oidc-token-converter.whitelistedDomains[0].issuerHost: localhost
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/token-converter", "<status>UP</status>" ]
    links:
      - registry
      - backbase-identity

  backbase-identity:
    image: auth-server:${BB_VERSION}
    build:
      context: ../images/auth-server
      args:
        IDENTITY_BUILDER: repo.backbase.com/backbase-docker-releases/auth-server-builder:${BB_VERSION}
    ports:
      - '8180:8080'
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KC_DB_URL: "jdbc:mysql://mysql:3306/backbase_identity?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true"
      KC_DB_USERNAME: "root"
      KC_DB_PASSWORD: "root"
      KC_LOG_LEVEL: "INFO"
      KC_LOG_CONSOLE_FORMAT: "%d{yyy:MM:dd HH:mm:ss.SSS} %-5p [%X{traceId},%X{spanId},%X{sampled}] %i --- [%t] %c{2.} : %m%n"
      KC_HOSTNAME_URL: "http://localhost:8180/auth/"
      KC_SPI_SERVICE_TOKEN_DEFAULT_URL: "http://token-converter:8080"
      KC_SPI_USER_MANAGER_CLIENT_DEFAULT_URL: "http://user-manager:8080"
      KC_SPI_CONNECTIONS_JPA_LEGACY_INITIALIZE_EMPTY: "true"
      KC_SPI_CONNECTIONS_JPA_LEGACY_MIGRATION_STRATEGY: "update"
      JAVA_TOOL_OPTIONS: "-Dquarkus.log.category.'\"com.backbase\"'.level=DEBUG \
                          -Dquarkus.log.category.'\"org.keycloak.protocol.oidc\"'.level=TRACE"
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://localhost:8080/auth/realms/backbase/.well-known/openid-configuration", "backbase" ]
    depends_on:
      mysql:
        condition: service_healthy

  access-control:
    image: repo.backbase.com/access-control-extension:2023.10-0.0.6
    deploy:
      replicas: 1
    ports:
      - "8040:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/access-control?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      waiting: 0
      "spring.cloud.stream.kafka.bindings.input.consumer.ackMode": "MANUAL"
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      SPRING_CLOUD_FUNCTION_DEFINITION: upsertDataGroup
      spring.liquibase.enabled: true
      "backbase.security.public.paths": "/service-api/v3/resume-topic/**"
      "management.endpoints.web.exposure.include": bindings
      logging.level.com.backbase: DEBUG
      RCH_KAFKA_BOOTSTRAP_SERVER: kafka:9092
      RCH_KAFKA_GROUP_ID: kafka-connect
      RCH_KAFKA_UPSERT_DATA_GROUP_ERROR_TOPIC_NAME: UpsertDataGroupsFailureEvent
      spring.cloud.stream.bindings.upsertDataGroup-in-0.destination: rch-30730-kep-data-group
      spring.cloud.stream.bindings.upsertDataGroup-in-0.group: rch-30730-upsert-data-groups-event-group
      spring.cloud.stream.bindings.upsertDataGroup-in-0.content-type: application/json
      spring.cloud.stream.bindings.upsertDataGroup-in-0.consumer.concurrency: 4
      spring.cloud.stream.bindings.upsertDataGroup-in-0.consumer.auto-commit-offset: true
      spring.cloud.stream.bindings.upsertDataGroup-in-0.consumer.max-attempts: 1
      spring.cloud.stream.bindings.upsertDataGroup-in-0.consumer.partitioned: true # Ensure input binding is partitioned
      spring.cloud.stream.kafka.bindings.upsertDataGroup-in-0.consumer.configuration.key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
      spring.cloud.stream.bindings.upsertDataGroup-out-0.destination: rch-30730-kep-data-group-push-success
      spring.cloud.stream.bindings.upsertDataGroup-out-0.group: rch-30730-upsert-data-groups-success-event-group
      spring.cloud.stream.bindings.upsertDataGroup-out-0.content-type: application/json
      spring.cloud.stream.kafka.bindings.upsertDataGroup-out-0.producer.message-key-expression: headers['kafka_messageKey']
      spring.cloud.stream.kafka.bindings.upsertDataGroup-out-0.producer.configuration.key.serializer: org.apache.kafka.common.serialization.StringSerializer
      spring.cloud.stream.bindings.upsertDataGroup-out-0.producer.partitionCount: 12
      #spring.cloud.stream.bindings.upsertDataGroup-out-0.producer.replica-count: 3


#      SPRING_CLOUD_STREAM_BINDINGS_upsertDataGroup-in-0_DESTINATION: UpsertDataGroupsEvent
#      #spring.cloud.stream.bindings.upsertDataGroup-in-0.consumer.partitionCount: 2
      #spring.cloud.stream.bindings.upsertDataGroup-in-0.consumer.concurrency: 4
      #spring.cloud.stream.bindings.upsertDataGroup-in-0.consumer.max-attempts: 1
      #spring.cloud.stream.bindings.upsertDataGroup-in-0.consumer.autoCommitOffset: true
      #spring.cloud.stream.bindings.upsertDataGroup-in-0.group: upsert-data-groups-event-group
      #spring.cloud.stream.bindings.upsertDataGroup-in-0.content-type: application/json
      #spring.cloud.stream.bindings.upsertDataGroup-in-0.error-handler-definition: MyErrorHandler
#
      #SPRING_CLOUD_STREAM_BINDINGS_upsertDataGroup-out-0_DESTINATION: UpsertDataGroupsSuccessEvent
      #spring.cloud.stream.bindings.upsertDataGroup-out-0.producer.partitionCount: 12
      #spring.cloud.stream.bindings.upsertDataGroup-out-0.group: upsert-data-groups-success-event-group
      #spring.cloud.stream.bindings.upsertDataGroup-out-0.content-type: application/json

      logging.root: WARN
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/access-control", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - kafka
      - registry

  arrangement-manager:
    image: repo.backbase.com/backbase-docker-releases/arrangement-manager:${BB_VERSION}
    ports:
      - "8050:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/arrangement-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      logging.level.com.backbase: DEBUG
      logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/arrangement-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - kafka
      - registry

  user-manager:
    image: repo.backbase.com/backbase-docker-releases/user-manager:${BB_VERSION}
    ports:
      - "8060:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/user-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      backbase.users.identity-endpoints-enabled: true
      backbase.users.identity-integration-enabled: true
      backbase.users.sync-primary-to-identity-enabled: true
      spring.cloud.discovery.client.simple.instances.user-integration-outbound-service[0].uri: http://wiremock:8080
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - kafka
      - registry

  identity-integration-service:
    image: repo.backbase.com/backbase-docker-releases/identity-integration-service:${BB_VERSION}
    ports:
      - "8070:8080"
    environment:
      <<: *common-variables
      identity.serverUrl: http://backbase-identity:8080/auth
      identity.masterAdmin.username: admin
      identity.masterAdmin.password: admin
      identity.realmConfiguration.fallbackOptions.enableUser: true
      identity.realmConfiguration.fallbackOptions.useTemporaryPassword: true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/identity-integration-service", "<status>UP</status>" ]
    links:
      - registry
      - backbase-identity

  product-catalog-task:
    image: repo.backbase.com/backbase-stream-images/product-catalog-task:${STREAM_VERSION}
    profiles:
      - bootstrap
    environment:
      <<: *common-variables
      spring.config.additional-location: file:/tmp/ingestion.yml
    volumes:
      - ../config/stream/ingestion.yml:/tmp/ingestion.yml
    depends_on:
      token-converter:
        condition: service_healthy
      arrangement-manager:
        condition: service_healthy

  legal-entity-bootstrap-task:
    image: repo.backbase.com/backbase-stream-images/legal-entity-bootstrap-task:${STREAM_VERSION}
    profiles:
      - bootstrap
    environment:
      <<: *common-variables
      spring.config.additional-location: file:/tmp/ingestion.yml
    volumes:
      - ../config/stream/ingestion.yml:/tmp/ingestion.yml
    depends_on:
      token-converter:
        condition: service_healthy
      access-control:
        condition: service_healthy
      arrangement-manager:
        condition: service_healthy
      user-manager:
        condition: service_healthy
      identity-integration-service:
        condition: service_healthy
      backbase-identity:
        condition: service_healthy
      product-catalog-task:
        condition: service_completed_successfully

  wiremock:
    image: wiremock/wiremock:2.32.0
    profiles:
      - with-mocks
    command:
      - --global-response-templating
      - --verbose
    volumes:
      - ./stubs:/home/wiremock

#  legal-entity-composition-service:
#     image: repo.backbase.com/backbase-stream-images/legal-entity-composition-service:3.72.1
#     ports:
#       - "8090:8080"
#     environment:
#       <<: *common-variables
#       eureka.client.enabled: 'true'
#       backbase.activemq.enabled: 'false'
#       spring.cloud.stream.defaultBinder: 'kafka'
#       backbase.kafka.enabled: 'true'
#       spring.kafka.consumer.bootstrap-servers: kafka:9092
#       spring.cloud.stream.kafka.binder.kafkas: kafka:9092
#       spring.cloud.stream.kafka.binder.zkNodes: zookeeper:2181
#       spring.kafka.bootstrap-servers: kafka:9092
#       PRODUCER_BOOTSTRAP_SERVERS: 'kafka:9092'
#       eureka.instance.appname: legal-entity-composition
#       backbase.stream.compositions.legal-entity.chains.product-composition.enabled: 'false'
#     volumes:
#       - ./scripts:/tmp/h
#     healthcheck:
#       <<: *healthcheck-defaults
#       test: [ "CMD", "java", "-Xmx5M", "-Xmx10M", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/legal-entity-composition", "<status>UP</status>" ]
#     depends_on:
#       kafka:
#         condition: service_healthy
#     links:
#       - registry
#       - kafka
#       - zookeeper


#  kafka:
#    image: confluentinc/cp-kafka
#    hostname: kafka
#    container_name: kafka
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#      - "29092:29092"
#    environment:
#      KAFKA_kafka_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
#      KAFKA_ADVERTISED_HOST_NAME: kafka
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
#      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
#      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
#      CONFLUENT_METRICS_ENABLE: 'true'
#      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
#      GROUP_ID: "group-event-1"
#      KAFKA_CREATE_TOPICS: "topic-event-1"
#    healthcheck:
#      test: [ "CMD-SHELL", "nc -z localhost 9092" ]

#  zookeeper:
#    image: wurstmeister/zookeeper
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    healthcheck:
#      disable: true
#      test: []
  akhq:
    # build:
    #   context: .
    image: tchiotludo/akhq
    restart: unless-stopped
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://schema-registry:8085"
              connect:
                - name: "connect"
                  url: "http://connect:8083"

    ports:
      - 1000:8080
    links:
      - kafka
      - schema-registry

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data:Z
      - zookeeper-log:/var/lib/zookeeper/log:Z
    environment:
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_ADMIN_ENABLE_SERVER: 'false'

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    restart: unless-stopped
    volumes:
      - kafka-data:/var/lib/kafka/data:Z
    environment:
      KAFKA_BROKER_ID: '0'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_NUM_PARTITIONS: '12'
      KAFKA_COMPRESSION_TYPE: 'gzip'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: '1'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_JMX_PORT: '9091'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.authorizer.AclAuthorizer'
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 9092" ]
    links:
      - zookeeper

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'

  connect:
    image: confluentinc/cp-kafka-connect:latest
    restart: unless-stopped
    depends_on:
      - kafka
      - schema-registry
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONNECT_REST_PORT: '8083'
      CONNECT_REST_LISTENERS: 'http://0.0.0.0:8083'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'connect'
      CONNECT_CONFIG_STORAGE_TOPIC: '__connect-config'
      CONNECT_OFFSET_STORAGE_TOPIC: '__connect-offsets'
      CONNECT_STATUS_STORAGE_TOPIC: '__connect-status'
      CONNECT_GROUP_ID: 'kafka-connect'
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 'true'
      CONNECT_KEY_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'true'
      CONNECT_VALUE_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_PLUGIN_PATH: ' /usr/share/java/'

  ksqldb:
    image: confluentinc/cp-ksqldb-server:latest
    restart: unless-stopped
    depends_on:
      - kafka
      - connect
      - schema-registry
    ports:
      - 8088:8088
    environment:
      KSQL_BOOTSTRAP_SERVERS: 'kafka:9092'
      KSQL_LISTENERS: 'http://0.0.0.0:8088'
      KSQL_KSQL_SERVICE_ID: 'ksql'
      KSQL_KSQL_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
      KSQL_KSQL_CONNECT_URL: 'http://connect:8083'
      KSQL_KSQL_SINK_PARTITIONS: '1'
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: '1'

#  test-data:
#    image: gradle:8-jdk11
#    command: "gradle --no-daemon testInjectData -x installFrontend -x assembleFrontend"
#    restart: unless-stopped
#    working_dir: /app
#    volumes:
#      - ./:/app:z
#    links:
#      - kafka
#      - schema-registry

#  kafkacat:
#    image: confluentinc/cp-kafkacat:7.0.13
#    restart: unless-stopped
#    depends_on:
#      - kafka
#    command:
#      - bash
#      - -c
#      - |
#        kafkacat -P -b kafka:9092 -t json << EOF
#        {"_id":"5c4b2b45ab234c86955f0802","index":0,"guid":"d3637b06-9940-4958-9f82-639001c14c34"}
#        {"_id":"5c4b2b459ffa9bb0c0c249e1","index":1,"guid":"08612fb5-40a7-45e5-9ff2-beb89a1b2835"}
#        {"_id":"5c4b2b4545d7cbc7bf8b6e3e","index":2,"guid":"4880280a-cf8b-4884-881e-7b64ebf2afd0"}
#        {"_id":"5c4b2b45dab381e6b3024c6d","index":3,"guid":"36d04c26-0dae-4a8e-a66e-bde9b3b6a745"}
#        {"_id":"5c4b2b45d1103ce30dfe1947","index":4,"guid":"14d53f2c-def3-406f-9dfb-c29963fdc37e"}
#        {"_id":"5c4b2b45d6d3b5c51d3dacb7","index":5,"guid":"a20cfc3a-934a-4b93-9a03-008ec651b5a4"}
#        EOF
#
#        kafkacat -P -b kafka:9092 -t csv << EOF
#        1,Sauncho,Attfield,sattfield0@netlog.com,Male,221.119.13.246
#        2,Luci,Harp,lharp1@wufoo.com,Female,161.14.184.150
#        3,Hanna,McQuillan,hmcquillan2@mozilla.com,Female,214.67.74.80
#        4,Melba,Lecky,mlecky3@uiuc.edu,Female,158.112.18.189
#        5,Mordecai,Hurdiss,mhurdiss4@rambler.ru,Male,175.123.45.143
#        EOF
#
#        kafkacat -b kafka:9092 -o beginning -G json-consumer json
#    links:
#      - kafka