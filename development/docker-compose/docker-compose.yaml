# https://docs.docker.com/compose/compose-file/

x-common-variables: &common-variables
  JAVA_TOOL_OPTIONS: -XX:MaxRAMPercentage=60.0 -Dlogging.level.com.backbase=DEBUG
  SIG_SECRET_KEY: JWTSecretKeyDontUseInProduction!
  USERCTX_KEY: JWTSecretKeyDontUseInProduction!
  eureka.client.serviceUrl.defaultZone: http://registry:8080/eureka
  eureka.client.healthcheck.enabled: true
  eureka.instance.non-secure-port: 8080
  eureka.instance.initialStatus: STARTING
  management.endpoints.web.exposure.include: '*'
  management.endpoints.enabled-by-default: true
  management.security.roles: ANONYMOUS,ACTUATOR,USER
  spring.main.banner-mode: off
  spring.zipkin.enabled: false
  spring.cloud.config.enabled: false
  spring.cloud.kubernetes.enabled: false
  backbase.audit.enabled: false
  backbase.security.public.paths: /integration-api/**
  backbase.security.mtls.enabled: false

x-database-variables: &database-variables
  logging.level.liquibase: INFO
  spring.liquibase.enabled: true
  spring.datasource.username: root
  spring.datasource.password: root
  spring.datasource.driver-class-name: com.mysql.cj.jdbc.Driver
  spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQL8Dialect

x-message-broker-variables: &message-broker-variables
  spring.activemq.broker-url: tcp://activemq:61616
  spring.activemq.user: admin
  spring.activemq.password: admin

x-healthcheck-defaults: &healthcheck-defaults
  start_period: 60s
  interval: 15s
  timeout: 5s
  retries: 15

volumes:
  backbase_mysql_data:
    driver: local

networks:
  default:
    name: backbase_default

name: pictet

services:
  mysql:
    container_name: mysql
    image: mysql:8.0.31
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - backbase_mysql_data:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping --silent
      interval: 10s
      timeout: 5s
      retries: 5

  activemq:
    container_name: activemq
    image: symptoma/activemq:5.17.3
    privileged: true
    ports:
      - "61616:61616"
      - "8161:8161"
    healthcheck:
      test: /opt/activemq/bin/activemq query --objname type=Broker,brokerName=*,service=Health | grep Good
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  registry:
    container_name: registry
    image: repo.backbase.com/backbase-docker-releases/registry:${BB_VERSION}
    ports:
      - "8761:8080"
    volumes:
      - ./scripts/HealthCheck.java:/tmp/HealthCheck.java
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/HealthCheck.java" ]

  edge:
    container_name: edge
    image: repo.backbase.com/backbase-docker-releases/edge:${BB_VERSION}
    ports:
      - "8280:8080"
    environment:
      <<: *common-variables
      gateway.actuator.security.enabled: false
      gateway.csrf.enabled: false
    volumes:
      - ./scripts/HealthCheck.java:/tmp/HealthCheck.java
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/HealthCheck.java", "http://registry:8080/eureka/apps/edge", "<status>UP</status>" ]
    links:
      - registry
      - token-converter

  token-converter:
    container_name: token_converter
    image: repo.backbase.com/backbase-docker-releases/oidc-token-converter-service:${BB_VERSION}
    ports:
      - "7779:8080"
    environment:
      <<: *common-variables
      backbase.oidc-token-converter.whitelistedDomains[0].internalHostScheme: http
      backbase.oidc-token-converter.whitelistedDomains[0].internalHost: backbase-identity:8080
      backbase.oidc-token-converter.whitelistedDomains[0].issuerHost: localhost
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/token-converter", "<status>UP</status>" ]
    links:
      - registry
      - backbase-identity

  backbase-identity:
    container_name: backbase_identity
    image: repo.backbase.com/backbase-docker-releases/backbase-identity:${BB_VERSION}
    ports:
      - '8180:8080'
    environment:
      QUARKUS_DATASOURCE_URL: "jdbc:mysql://mysql:3306/backbase_identity?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true"
      QUARKUS_DATASOURCE_USERNAME: "root"
      QUARKUS_DATASOURCE_PASSWORD: "root"
      QUARKUS_DATASOURCE_DRIVER: "com.mysql.cj.jdbc.Driver"
      QUARKUS_LOG_FILE_ENABLE: "false"
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KEYCLOAK_HOME_DIR: "/"
      KEYCLOAK_CONNECTIONSJPA_QUARKUS_INITIALIZEEMPTY: "true"
      KEYCLOAK_CONNECTIONSJPA_QUARKUS_MIGRATIONSTRATEGY: "update"
      KEYCLOAK_BACKBASE_OIDC_TOKEN_CONVERTER_URL: "http://token-converter:8080"
      keycloak.hostname.default.frontendUrl: "http://localhost:8180/auth"
      JAVA_TOOL_OPTIONS: "-Dkeycloak.migration.strategy=IGNORE_EXISTING -Dkeycloak.migration.action=import -Dkeycloak.profile.feature.upload_scripts=enabled -Dquarkus.log.category.'\"com.backbase\"'.level=DEBUG"
    volumes:
      - ../config/identity:/tmp/keycloak-export
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://localhost:8080/auth/realms/backbase/.well-known/openid-configuration", "backbase" ]
    depends_on:
      mysql:
        condition: service_healthy

  access-control:
    container_name: access_control
    image: repo.backbase.com/backbase-docker-releases/access-control:${BB_VERSION}
    ports:
      - "8040:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/access-control?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/access-control", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  arrangement-manager:
    container_name: arrangement_manager
    image: repo.backbase.com/backbase-docker-releases/arrangement-manager:${BB_VERSION}
    ports:
      - "8050:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/arrangement-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/arrangement-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  user-manager:
    container_name: user_manager
    image: repo.backbase.com/backbase-docker-releases/user-manager:${BB_VERSION}
    ports:
      - "8060:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/user-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      backbase.users.identity-endpoints-enabled: true
      backbase.users.identity-integration-enabled: true
      backbase.users.sync-primary-to-identity-enabled: true
      spring.cloud.discovery.client.simple.instances.user-integration-outbound-service[0].uri: http://wiremock:8080
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  identity-integration-service:
    container_name: identity_integration_service
    image: repo.backbase.com/backbase-docker-releases/identity-integration-service:${BB_VERSION}
    ports:
      - "8070:8080"
    environment:
      <<: *common-variables
      identity.serverUrl: http://backbase-identity:8080/auth
      identity.masterAdmin.username: admin
      identity.masterAdmin.password: admin
      identity.realmConfiguration.fallbackOptions.enableUser: true
      identity.realmConfiguration.fallbackOptions.useTemporaryPassword: true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/identity-integration-service", "<status>UP</status>" ]
    links:
      - registry
      - backbase-identity

  entitlements-integration-service:
    container_name: entitlements_integration_service
    image: cr.pictet.io/dcp/entitlements-integration-service:1.0.0-SNAPSHOT
    ports:
      - "8090:8080"
    environment:
      <<: *common-variables
      eureka.client.enabled: true
      spring.kafka.security.protocol: PLAINTEXT
      spring.kafka.ssl.trust-store-location: ''
      spring.kafka.ssl.key-store-location: ''
      spring.kafka.bootstrap-servers: kafka:9092
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/entitlements-integration", "<status>UP</status>" ]
    links:
      - registry
