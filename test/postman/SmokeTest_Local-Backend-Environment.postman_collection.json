{
	"info": {
		"_postman_id": "86936ab4-a177-4b19-b2d2-6024408e7259",
		"name": "Smoke Test Local Backend Environment",
		"description": "Specs for Message Service API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31434885"
	},
	"item": [
		{
			"name": "Create Users",
			"item": [
				{
					"name": "Login Master Admin to obtain access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 'OK'\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"accessToken\", jsonData.access_token);",
									"postman.setEnvironmentVariable(\"jwtToken\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "admin-cli",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{identityUrl}}/auth/realms/master/protocol/openid-connect/token",
							"host": [
								"{{identityUrl}}"
							],
							"path": [
								"auth",
								"realms",
								"master",
								"protocol",
								"openid-connect",
								"token"
							]
						},
						"description": "Note this requires the MASTER Realm to be set!"
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 'OK'\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"backender\",\n    \"enabled\": \"true\",\n    \"firstName\": \"BE\",\n    \"lastName\": \"Dev\",\n    \"credentials\": [\n        {\n            \"type\": \"password\",\n            \"value\": \"password\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{identityUrl}}/auth/admin/realms/backbase/users",
							"host": [
								"{{identityUrl}}"
							],
							"path": [
								"auth",
								"admin",
								"realms",
								"backbase",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 'OK'\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Get user id to delete",
									"var jsonData = JSON.parse(responseBody);",
									"const user = jsonData.find(function (item) { return item.username === 'backender' })",
									"",
									"pm.test(\"Created user is found\", function () {",
									"    pm.expect(user).not.eq(undefined);",
									"});",
									"",
									"postman.setEnvironmentVariable(\"userId\", user.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{identityUrl}}/auth/admin/realms/backbase/users",
							"host": [
								"{{identityUrl}}"
							],
							"path": [
								"auth",
								"admin",
								"realms",
								"backbase",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 'OK'\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{identityUrl}}/auth/admin/realms/backbase/users/{{userId}}",
							"host": [
								"{{identityUrl}}"
							],
							"path": [
								"auth",
								"admin",
								"realms",
								"backbase",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "access-control",
			"item": [
				{
					"name": "login",
					"item": [
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"XSRF Token Cookie returned\", function () {",
											"    var cookie = postman.getResponseCookie(\"XSRF-TOKEN\");",
											"    pm.expect(cookie).to.be.not.null;",
											"    if (cookie && cookie.value) {",
											"        postman.setGlobalVariable(\"X-CSRF-TOKEN\", cookie.value);",
											"    }",
											"});",
											"",
											"//for auth read cookie",
											"var authCookie = postman.getResponseCookie(\"AuthToken\");",
											"if (authCookie && authCookie.value) {",
											"  postman.setGlobalVariable(\"authToken\", authCookie.value);",
											"}",
											"",
											"//for identity read json",
											"if (responseBody) {",
											"  var jsonData = JSON.parse(responseBody);",
											"  postman.setGlobalVariable(\"authToken\", jsonData.access_token);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//clear Auth and CSRF",
											"postman.setGlobalVariable(\"authToken\"); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "bb-tooling-client",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{identityUrl}}/auth/realms/backbase/protocol/openid-connect/token",
									"host": [
										"{{identityUrl}}"
									],
									"path": [
										"auth",
										"realms",
										"backbase",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Context Agreements",
					"item": [
						{
							"name": "Get User Context Service Agreements",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"MSA_ID\", jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/access-control/client-api/v3/accessgroups/user-context/service-agreements",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"access-control",
										"client-api",
										"v3",
										"accessgroups",
										"user-context",
										"service-agreements"
									]
								},
								"description": "Returns current user's service agreements"
							},
							"response": []
						},
						{
							"name": "Get Function Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"MSA_ID\", jsonData[0].id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/access-control/client-api/v3/accessgroups/function-groups?serviceAgreementId={{MSA_ID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"access-control",
										"client-api",
										"v3",
										"accessgroups",
										"function-groups"
									],
									"query": [
										{
											"key": "serviceAgreementId",
											"value": "{{MSA_ID}}"
										}
									]
								},
								"description": "Returns current user's service agreements"
							},
							"response": []
						},
						{
							"name": "Get User Permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/access-control/client-api/v3/accessgroups/users/permissions/summary",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"access-control",
										"client-api",
										"v3",
										"accessgroups",
										"users",
										"permissions",
										"summary"
									]
								},
								"description": "Returns current user's service agreements"
							},
							"response": []
						},
						{
							"name": "Set User Context Service Agreements",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function() {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"serviceAgreementId\": \"{{MSA_ID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/access-control/client-api/v3/accessgroups/user-context",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"access-control",
										"client-api",
										"v3",
										"accessgroups",
										"user-context"
									]
								},
								"description": "Returns current user's service agreements"
							},
							"response": []
						},
						{
							"name": "Delete User Context Service Agreements",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function() {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/access-control/client-api/v3/accessgroups/user-context",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"access-control",
										"client-api",
										"v3",
										"accessgroups",
										"user-context"
									]
								},
								"description": "Returns current user's service agreements"
							},
							"response": []
						}
					]
				},
				{
					"name": "Business Functions",
					"item": [
						{
							"name": "Get All Business Functions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"MSA_ID\", jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/access-control/client-api/v3/accessgroups/business-functions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"access-control",
										"client-api",
										"v3",
										"accessgroups",
										"business-functions"
									]
								},
								"description": "Returns current user's service agreements"
							},
							"response": []
						}
					]
				},
				{
					"name": "Function Groups",
					"item": [
						{
							"name": "Get Function Groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"MSA_ID\", jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/access-control/client-api/v3/accessgroups/function-groups?serviceAgreementId={{MSA_ID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"access-control",
										"client-api",
										"v3",
										"accessgroups",
										"function-groups"
									],
									"query": [
										{
											"key": "serviceAgreementId",
											"value": "{{MSA_ID}}"
										}
									]
								},
								"description": "Returns current user's service agreements"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "arrangement-manager",
			"item": [
				{
					"name": "login",
					"item": [
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"XSRF Token Cookie returned\", function () {",
											"    var cookie = postman.getResponseCookie(\"XSRF-TOKEN\");",
											"    pm.expect(cookie).to.be.not.null;",
											"    if (cookie && cookie.value) {",
											"        postman.setGlobalVariable(\"X-CSRF-TOKEN\", cookie.value);",
											"    }",
											"});",
											"",
											"//for auth read cookie",
											"var authCookie = postman.getResponseCookie(\"AuthToken\");",
											"if (authCookie && authCookie.value) {",
											"  postman.setGlobalVariable(\"authToken\", authCookie.value);",
											"}",
											"",
											"//for identity read json",
											"if (responseBody) {",
											"  var jsonData = JSON.parse(responseBody);",
											"  postman.setGlobalVariable(\"authToken\", jsonData.access_token);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//clear Auth and CSRF",
											"postman.setGlobalVariable(\"authToken\"); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "bb-tooling-client",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{identityUrl}}/auth/realms/backbase/protocol/openid-connect/token",
									"host": [
										"{{identityUrl}}"
									],
									"path": [
										"auth",
										"realms",
										"backbase",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Balances Aggregations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/arrangement-manager/client-api/v2/balances/aggregations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"arrangement-manager",
								"client-api",
								"v2",
								"balances",
								"aggregations"
							]
						},
						"description": "Returns current user's service agreements"
					},
					"response": []
				},
				{
					"name": "Get Product Kinds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/arrangement-manager/client-api/v2/product-kinds",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"arrangement-manager",
								"client-api",
								"v2",
								"product-kinds"
							]
						},
						"description": "Returns current user's service agreements"
					},
					"response": []
				}
			]
		},
		{
			"name": "contact-manager",
			"item": [
				{
					"name": "login",
					"item": [
						{
							"name": "login sara",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"XSRF Token Cookie returned\", function () {",
											"    var cookie = postman.getResponseCookie(\"XSRF-TOKEN\");",
											"    pm.expect(cookie).to.be.not.null;",
											"    if (cookie && cookie.value) {",
											"        postman.setGlobalVariable(\"X-CSRF-TOKEN\", cookie.value);",
											"    }",
											"});",
											"",
											"//for auth read cookie",
											"var authCookie = postman.getResponseCookie(\"AuthToken\");",
											"if (authCookie && authCookie.value) {",
											"  postman.setGlobalVariable(\"authToken\", authCookie.value);",
											"}",
											"",
											"//for identity read json",
											"if (responseBody) {",
											"  var jsonData = JSON.parse(responseBody);",
											"  postman.setGlobalVariable(\"authToken\", jsonData.access_token);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//clear Auth and CSRF",
											"postman.setGlobalVariable(\"authToken\"); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "sara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "sara",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "bb-tooling-client",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{identityUrl}}/auth/realms/backbase/protocol/openid-connect/token",
									"host": [
										"{{identityUrl}}"
									],
									"path": [
										"auth",
										"realms",
										"backbase",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/contact-manager/client-api/v2/contacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"contact-manager",
								"client-api",
								"v2",
								"contacts"
							]
						},
						"description": "Returns current user's service agreements"
					},
					"response": []
				},
				{
					"name": "Get Contacts Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/contact-manager/client-api/v2/configurations/countries/BH/accounts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"contact-manager",
								"client-api",
								"v2",
								"configurations",
								"countries",
								"BH",
								"accounts"
							],
							"query": [
								{
									"key": "",
									"value": "2c9380878e0dfac4018e0dfd35690001",
									"disabled": true
								}
							]
						},
						"description": "Returns current user's service agreements"
					},
					"response": []
				},
				{
					"name": "Get Contacts admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/contact-manager/service-api/v2/contacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"contact-manager",
								"service-api",
								"v2",
								"contacts"
							]
						},
						"description": "Returns current user's service agreements"
					},
					"response": []
				},
				{
					"name": "Post Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Frank Doe\",\n  \"alias\": \"Frank\",\n  \"category\": \"Employee\",\n  \"country\": \"NL\",\n  \"accounts\": [\n    {\n      \"name\": \"Saving account\",\n      \"alias\": \"Savings\",\n      \"IBAN\": \"FI21 1234 5600 0007 85\",\n      \"bankCountry\": \"NL\"\n    }\n  ],\n    \"additions\":\n    {\n        \"custom-text\": \"custom text field\",\n        \"custom-number\": \"1\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/contact-manager/client-api/v2/contacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"contact-manager",
								"client-api",
								"v2",
								"contacts"
							]
						},
						"description": "Returns current user's service agreements"
					},
					"response": []
				}
			]
		},
		{
			"name": "payment-order-service",
			"item": [
				{
					"name": "login",
					"item": [
						{
							"name": "login sara",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"XSRF Token Cookie returned\", function () {",
											"    var cookie = postman.getResponseCookie(\"XSRF-TOKEN\");",
											"    pm.expect(cookie).to.be.not.null;",
											"    if (cookie && cookie.value) {",
											"        postman.setGlobalVariable(\"X-CSRF-TOKEN\", cookie.value);",
											"    }",
											"});",
											"",
											"//for auth read cookie",
											"var authCookie = postman.getResponseCookie(\"AuthToken\");",
											"if (authCookie && authCookie.value) {",
											"  postman.setGlobalVariable(\"authToken\", authCookie.value);",
											"}",
											"",
											"//for identity read json",
											"if (responseBody) {",
											"  var jsonData = JSON.parse(responseBody);",
											"  postman.setGlobalVariable(\"authToken\", jsonData.access_token);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//clear Auth and CSRF",
											"postman.setGlobalVariable(\"authToken\"); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "sara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "sara",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "bb-tooling-client",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{identityUrl}}/auth/realms/backbase/protocol/openid-connect/token",
									"host": [
										"{{identityUrl}}"
									],
									"path": [
										"auth",
										"realms",
										"backbase",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Currencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/payment-order-service/client-api/v3/payment-orders/currencies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"payment-order-service",
								"client-api",
								"v3",
								"payment-orders",
								"currencies"
							],
							"query": [
								{
									"key": "",
									"value": "2c9380878e0dfac4018e0dfd35690001",
									"disabled": true
								}
							]
						},
						"description": "Returns current user's service agreements"
					},
					"response": []
				},
				{
					"name": "Get Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/payment-order-service/client-api/v3/payment-orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"payment-order-service",
								"client-api",
								"v3",
								"payment-orders"
							],
							"query": [
								{
									"key": "",
									"value": "2c9380878e0dfac4018e0dfd35690001",
									"disabled": true
								}
							]
						},
						"description": "Returns current user's service agreements"
					},
					"response": []
				},
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"af2599ef-759a-4b78-8e67-4949055a532b\",\n  \"originatorAccount\": {\n    \"identification\": {\n      \"identification\": \"729190df-a421-4937-94fd-5e1a3da132cc\",\n      \"schemeName\": \"ID\"\n    }\n  },\n  \"requestedExecutionDate\": \"2023-02-06\",\n  \"paymentType\": \"SEPA_CREDIT_TRANSFER\",\n  \"transferTransactionInformation\": {\n    \"instructedAmount\": {\n      \"amount\": \"100.00\",\n      \"currencyCode\": \"EUR\"\n    },\n    \"counterparty\": {\n      \"name\": \"J. Sparrow\"\n    },\n    \"counterpartyAccount\": {\n      \"identification\": {\n        \"identification\": \"NL21ABNA0136371124\",\n        \"schemeName\": \"IBAN\"\n      },\n      \"selectedContact\": {\n        \"contactId\": \"14b0b245-c7a9-427e-8e77-26c2f98dfa3d\",\n        \"accountId\": \"61425aed-5d5c-4292-8f60-e2f3efc9b66a\"\n      }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/payment-order-service/client-api/v3/payment-orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"payment-order-service",
								"client-api",
								"v3",
								"payment-orders"
							],
							"query": [
								{
									"key": "",
									"value": "2c9380878e0dfac4018e0dfd35690001",
									"disabled": true
								}
							]
						},
						"description": "Returns current user's service agreements"
					},
					"response": []
				},
				{
					"name": "Get Contacts Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/contact-manager/client-api/v2/configurations/countries/BH/accounts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"contact-manager",
								"client-api",
								"v2",
								"configurations",
								"countries",
								"BH",
								"accounts"
							],
							"query": [
								{
									"key": "",
									"value": "2c9380878e0dfac4018e0dfd35690001",
									"disabled": true
								}
							]
						},
						"description": "Returns current user's service agreements"
					},
					"response": []
				},
				{
					"name": "Get Contacts admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/contact-manager/service-api/v2/contacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"contact-manager",
								"service-api",
								"v2",
								"contacts"
							]
						},
						"description": "Returns current user's service agreements"
					},
					"response": []
				},
				{
					"name": "Post Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"alias\": \"John\",\n  \"category\": \"Employee\",\n  \"contactPerson\": \"Jane Doe\",\n  \"phoneNumber\": \"055512345678\",\n  \"emailId\": \"john@example.com\",\n  \"addressLine1\": \"Backbase enterprise\",\n  \"addressLine2\": \"\",\n  \"streetName\": \"Jacob Bontiusplaats 9\",\n  \"town\": \"Amsterdam\",\n  \"postCode\": \"1018 LL\",\n  \"countrySubDivision\": \"North Holland\",\n  \"country\": \"NL\",\n  \"accounts\": [\n    {\n      \"name\": \"Jane Doe\",\n      \"alias\": \"Jane\",\n      \"accountType\": \"SAVINGS\",\n      \"IBAN\": \"FI21 1234 5600 0007 85\",\n      \"bankName\": \"Test Bank\",\n      \"bankAddressLine1\": \"Test Bank Co\",\n      \"bankAddressLine2\": \"\",\n      \"bankStreetName\": \"Jodenbreestraat 96\",\n      \"bankTown\": \"Amsterdam\",\n      \"bankPostCode\": \"1011NS\",\n      \"bankCountrySubDivision\": \"North Holland\",\n      \"bankCountry\": \"NL\",\n      \"accountHolderAddressLine1\": \"Backbase enterprise\",\n      \"accountHolderAddressLine2\": \"\",\n      \"accountHolderStreetName\": \"Jacob Bontiusplaats 9\",\n      \"accountHolderTown\": \"Amsterdam\",\n      \"accountHolderPostCode\": \"1018 LL\",\n      \"accountHolderCountrySubDivision\": \"North Holland\",\n      \"accountHolderCountry\": \"NL\"\n    }\n  ],\n  \"approved\": true,\n  \"accessContextScope\": \"USER\",\n  \"userReference\": \"Car rental payment to John\",\n  \"contactReference\": \"Car rental payment from Robin\",\n  \"searchableFieldOne\": \"Some search data one\",\n  \"searchableFieldTwo\": \"Some search data two\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/contact-manager/client-api/v2/contacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"contact-manager",
								"client-api",
								"v2",
								"contacts"
							]
						},
						"description": "Returns current user's service agreements"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}